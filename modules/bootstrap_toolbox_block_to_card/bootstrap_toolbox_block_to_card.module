<?php

/**
 * @file
 * Primary module hooks for Bootstrap Toolbox Block to Card module.
 */


use Drupal\Core\Form\FormStateInterface;
use Drupal\block\Entity\Block;

use Drupal\Core\Layout\LayoutPluginManagerInterface;

use Drupal\layout_builder\Form\ConfigureBlockFormBase;

/**
 * Implements hook_theme().
 */
function bootstrap_toolbox_block_to_card_theme($existing, $type, $theme, $path) {
  $module_path = \Drupal::service('extension.list.module')->getPath('bootstrap_toolbox_block_to_card');

  return [
    'bootstrap_toolbox_block_to_card' => [
      'render element' => 'elements',
      'template' => 'bootstrap-toolbox-block-to-card', 
      'path' => $module_path . '/templates',
    ],
  ];
}




/**
 * Implements hook_form_alter().
 */
function bootstrap_toolbox_block_to_card_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $utilityservice = \Drupal::service('bootstrap_toolbox.utility_service');
  $cardStylesOptions = $utilityservice->getScopeListFiltered(['cards_formatters']);
  $headerStylesOptions = $utilityservice->getScopeListFiltered(['header_cards_formatters']);
  $bodyStylesOptions = $utilityservice->getScopeListFiltered(['body_cards_formatters']);
  
  if($form_id=='block_form'){
    $block = $form_state->getFormObject()->getEntity();
    $themeAsCard = $block->getThirdPartySetting('bootstrap_toolbox_theme_as_a_card', 'theme_as_card', FALSE);
    $cardStyle = $block->getThirdPartySetting('bootstrap_toolbox_theme_as_a_card', 'card_style', FALSE); 
    $headerStyle =  $block->getThirdPartySetting('bootstrap_toolbox_theme_as_a_card', 'header_style', FALSE);
    $bodyStyle = $block->getThirdPartySetting('bootstrap_toolbox_theme_as_a_card', 'body_style', FALSE);
    

    $form['bootstrap_toolbox_theme_as_a_card'] = [
        '#type' => 'details',
        '#title' => t('Theme as a card'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'bootstrap_toolbox_verticaltabs',
      ];

    $form['bootstrap_toolbox_theme_as_a_card']['theme_as_card'] = [
      '#type' => 'checkbox',
      '#title' => t('Theme as a card'),
      '#default_value' => $themeAsCard,
    ];

    $form['bootstrap_toolbox_theme_as_a_card']['card_style'] = [
      '#type' => 'select',
      '#title' => t('Card style'),
      '#default_value' => $cardStyle,
      '#options' => $cardStylesOptions,
      '#empty_option' => 'None',
      '#states' => [
        'visible' => [
          ':input[name="bootstrap_toolbox_theme_as_a_card[theme_as_card]"]' => ['checked' => TRUE],
        ],
      ],
    ];
    
    $form['bootstrap_toolbox_theme_as_a_card']['header_style'] = [
      '#type' => 'select',
      '#title' => t('Header style'),
      '#default_value' => $headerStyle,
      '#options' => $headerStylesOptions,
      '#empty_option' => 'None',
      '#states' => [
        'visible' => [
          ':input[name="bootstrap_toolbox_theme_as_a_card[theme_as_card]"]' => ['checked' => TRUE],
        ],
      ],
    ];
    
    $form['bootstrap_toolbox_theme_as_a_card']['body_style'] = [
      '#type' => 'select',
      '#title' => t('Body style'),
      '#default_value' => $bodyStyle ,
      '#options' => $bodyStylesOptions,
      '#empty_option' => 'None',
      '#states' => [
        'visible' => [
          ':input[name="bootstrap_toolbox_theme_as_a_card[theme_as_card]"]' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['actions']['submit']['#submit'][] = 'bootstrap_toolbox_block_to_card_form_alter_submit';

  } elseif($form['#form_id'] === 'layout_builder_add_block' || $form['#form_id'] === 'layout_builder_update_block') {
    /** @var \Drupal\layout_builder\Form\ConfigureBlockFormBase $formObject */
    $formObject = $form_state->getFormObject();

    $component = $formObject->getCurrentComponent();
    $blockPluginId = $component->getPluginId();
    
    // If this is a reusable block, retrieve the block bundle.
    if (strpos($blockPluginId, 'block_content:') === 0) {
      $settings = $component->get('bootstrap_toolbox_blockstyle');
      
      $themeAsCard = $settings['theme_as_card'] ?? FALSE;
      $cardStyle = $settings['card_style'] ?? FALSE;
      $headerStyle = $settings['header_style'] ?? FALSE;
      $bodyStyle = $settings['body_style'] ?? FALSE;
      
      $form['bootstrap_toolbox']['theme_as_card'] = [
        '#type' => 'checkbox',
        '#title' => ('Theme as a card'),
        '#default_value' => $themeAsCard,
      ];

      $form['bootstrap_toolbox']['card_style'] = [
      '#type' => 'select',
      '#title' => t('Card style'),
      '#default_value' => $cardStyle,
      '#options' => $cardStylesOptions,
      '#states' => [
        'visible' => [
          ':input[name="bootstrap_toolbox[theme_as_card]"]' => ['checked' => TRUE],
        ],
      ],
    ];
    
    $form['bootstrap_toolbox']['header_style'] = [
      '#type' => 'select',
      '#title' => t('Header style'),
      '#default_value' => $headerStyle,
      '#options' => $headerStylesOptions,
      '#states' => [
        'visible' => [
          ':input[name="bootstrap_toolbox[theme_as_card]"]' => ['checked' => TRUE],
        ],
      ],
    ];
    
    $form['bootstrap_toolbox']['body_style'] = [
      '#type' => 'select',
      '#title' => t('Body style'),
      '#default_value' => $bodyStyle ,
      '#options' => $bodyStylesOptions,
      '#states' => [
        'visible' => [
          ':input[name="bootstrap_toolbox[theme_as_card]"]' => ['checked' => TRUE],
        ],
      ],
    ];
      
      array_unshift($form['#submit'], 'bootstrap_toolbox_theme_as_a_card_submit_block_form');
    }
  }
  
  
}


/**
 * Custom submit handler for submitting LB block forms.
 *
 * Persists the configured block style to the component configuration data,
 * which is later persisted to section storage by layout builder's base form.
 */
function bootstrap_toolbox_theme_as_a_card_submit_block_form(array $form, \Drupal\Core\Form\FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\Form\ConfigureBlockFormBase $formObject */
  $formObject = $form_state->getFormObject();
  $component = $formObject->getCurrentComponent();
  $settings = $form_state->getValue('bootstrap_toolbox');
  $newSettings = $component->get('bootstrap_toolbox_blockstyle');
  $newSettings['theme_as_card'] = $settings['theme_as_card'];
  $newSettings['card_style'] = $settings['card_style'];
  $newSettings['header_style'] = $settings['header_style'];
  $newSettings['body_style'] = $settings['body_style'];
  $component->set('bootstrap_toolbox_blockstyle', $newSettings);
}


/**
 *
 * Process block alter form with third party settings
 *
 */ 
function bootstrap_toolbox_block_to_card_form_alter_submit($form, \Drupal\Core\Form\FormStateInterface $formState) {
  $block = $formState->getFormObject()->getEntity();
  $settings = $formState->getValue('bootstrap_toolbox_theme_as_a_card');
  $block->setThirdPartySetting('bootstrap_toolbox_theme_as_a_card','theme_as_card', $settings['theme_as_card']);
  $block->setThirdPartySetting('bootstrap_toolbox_theme_as_a_card','card_style', $settings['card_style']);
  $block->setThirdPartySetting('bootstrap_toolbox_theme_as_a_card','header_style', $settings['header_style']);
  $block->setThirdPartySetting('bootstrap_toolbox_theme_as_a_card','body_style', $settings['body_style']);
  $block->save();
}

/**
 * Implements hook_block_view_alter().
 */
function bootstrap_toolbox_block_to_card_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  $entity_block = $build['#block'];
  $themeAsCard = $entity_block->getThirdPartySetting('bootstrap_toolbox_theme_as_a_card', 'theme_as_card', FALSE);
  if( $themeAsCard){
    $utilityservice = \Drupal::service('bootstrap_toolbox.utility_service');
    $build['#configuration']['theme_as_card'] = TRUE;
    $cardStyle = $entity_block->getThirdPartySetting('bootstrap_toolbox_theme_as_a_card', 'card_style', '');
    $headerStyle = $entity_block->getThirdPartySetting('bootstrap_toolbox_theme_as_a_card', 'header_style', '');
    $bodyStyle = $entity_block->getThirdPartySetting('bootstrap_toolbox_theme_as_a_card', 'body_style', '');
    $build['#from_layout_builder'] = FALSE;
    if($cardStyle){
      $build['#configuration']['card_classes'] = $utilityservice->getStyleById($cardStyle);  
    }
    if($headerStyle){
      $build['#configuration']['header_classes'] = $utilityservice->getStyleById($headerStyle);
    }
    if($bodyStyle){
      $build['#configuration']['body_classes'] = $utilityservice->getStyleById($bodyStyle);  
    }
    $build['#theme'] = 'bootstrap_toolbox_block_to_card';
  }
}


/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function bootstrap_toolbox_block_to_card_preprocess_bootstrap_toolbox_block_to_card(&$variables) {
  if (isset($variables['elements']['#configuration']['theme_as_card']) && $variables['elements']['#configuration']['theme_as_card'] ) {
    foreach($variables['elements']['#configuration'] as $key=>$value){
      $variables[$key] = $value;
    }
    $variables['content']  = $variables['elements']['content'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess inline-blocks from Layout Builder
 * 
 */
function bootstrap_toolbox_block_to_card_preprocess_layout(&$variables){
  if(array_key_exists('content',$variables['content'])){
    foreach($variables['content']['content'] as $key=>$content){
      if($key!='#attributes'){
        if (array_key_exists('#plugin_id',$content) && strpos($content['#plugin_id'], 'block_content:') === 0) {
          if(array_key_exists('#bootstrap_toolbox_blockstyle',$content)){
            if($content['#bootstrap_toolbox_blockstyle']['theme_as_card']){
              $settings = $content['#bootstrap_toolbox_blockstyle'];
              $themeAsCard = $settings['theme_as_card'];
              $cardStyle = $settings['card_style'];
              $headerStyle = $settings['header_style'];
              $bodyStyle = $settings['body_style'];
              $variables['content']['content'][$key]['#theme'] = 'bootstrap_toolbox_block_to_card';
              
              $block = $variables['content']['content'][$key]['content']['#block_content'];
              $block_content = \Drupal::entityTypeManager()
              ->getViewBuilder('block_content')
              ->view($block, 'full');

              $variables['content']['content'][$key]['content'] = $block_content;

              if($variables['content']['content'][$key]['#configuration']['label_display'] == 'visible' ){
                $variables['content']['content'][$key]['label'] = [$variables['content']['content'][$key]['#configuration']['label']];
              } else {
                $variables['content']['content'][$key]['label'] ='';
              }
              $utilityservice = \Drupal::service('bootstrap_toolbox.utility_service');
              $variables['content']['content'][$key]['#from_layout_builder'] = TRUE;
              $variables['content']['content'][$key]['#card_classes'] = $utilityservice->getStyleById($cardStyle);
              $variables['content']['content'][$key]['#header_classes'] = $utilityservice->getStyleById($headerStyle);
              $variables['content']['content'][$key]['#body_classes'] = $utilityservice->getStyleById($bodyStyle);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_library_info_build().
 */
//~ function bootstrap_toolbox_block_to_card_library_info_build() {
  //~ $libraries['block_styles'] = [
    //~ 'css' => [
      //~ 'theme' => [
        //~ 'css/bootstrap-toolbox-block-to-card.css' => [],
      //~ ],
    //~ ],
  //~ ];
  //~ return $libraries;
//~ }

/**
 * Implements hook_page_attachments().
 */
//~ function bootstrap_toolbox_block_to_card_page_attachments(array &$attachments) {
  //~ $attachments['#attached']['library'][] = 'bootstrap_toolbox_block_to_card/block_styles';
//~ }

